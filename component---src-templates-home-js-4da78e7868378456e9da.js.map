{"version":3,"sources":["webpack:///./src/templates/home.js"],"names":["query","Home","render","posts_sorted","posts","getPages","this","props","pageContext","pages","posts_count","_","size","site","page","image","get","id","className","orderBy","map","post","post_idx","key","to","withPrefix","rel","dateTime","moment","strftime","src","alt","aria-hidden","React","Component"],"mappings":"6SAYO,IAAMA,EAAK,aAQGC,E,gLACjBC,OAAA,WAAU,IAUcC,EAVf,OACDC,EAAQC,YAASC,KAAKC,MAAMC,YAAYC,MAAO,UAC/CC,EAAcC,IAAEC,KAAKR,GACzB,OACI,kBAAC,IAAWE,KAAKC,MACf,kBAAC,IAAD,iBAAYD,KAAKC,MAAjB,CAAwBM,KAAMP,KAAKC,MAAMC,YAAYK,KAAMC,KAAMR,KAAKC,MAAMC,YAAaO,MAAOJ,IAAEK,IAAIV,KAAKC,MAAO,sDAAuD,SACzK,yBAAKU,GAAG,UAAUC,UAAU,gBAC1B,0BAAMD,GAAG,OAAOC,UAAU,mBACxB,yBAAKA,UAAU,aACXR,EAAc,IACRP,EAAeQ,IAAEQ,QAAQf,EAAO,mBAAoB,QAEtDO,IAAES,IAAIjB,GAAc,SAACkB,EAAMC,GAAP,OACpB,6BAASC,IAAKD,EAAUJ,UAAU,QAChC,4BAAQA,UAAU,eAChB,wBAAIA,UAAU,cAAa,kBAAC,IAAD,CAAMM,GAAIC,YAAWd,IAAEK,IAAIK,EAAM,MAAO,OAAQK,IAAI,YAAYf,IAAEK,IAAIK,EAAM,oBAAqB,QAC5H,yBAAKH,UAAU,aAAf,gBACe,0BAAMA,UAAU,YAC3BS,SAAUC,IAAOjB,IAAEK,IAAIK,EAAM,mBAAoB,OAAOQ,SAAS,mBAAoBD,IAAOjB,IAAEK,IAAIK,EAAM,mBAAoB,OAAOQ,SAAS,gBAGjJlB,IAAEK,IAAIK,EAAM,6BAA8B,OAC3C,kBAAC,IAAD,CAAMH,UAAU,iBAAiBM,GAAIC,YAAWd,IAAEK,IAAIK,EAAM,MAAO,QACjE,yBAAKH,UAAU,YAAYY,IAAKL,YAAWd,IAAEK,IAAIK,EAAM,6BAA8B,OAAQU,IAAKpB,IAAEK,IAAIK,EAAM,4BAA6B,SAG7I,yBAAKH,UAAU,gBACb,2BAAIP,IAAEK,IAAIK,EAAM,sBAAuB,SAE+B,IAArEV,IAAEK,IAAI,EAAKT,MAAO,wCAAyC,OAAmBI,IAAEK,IAAI,EAAKT,MAAO,yCAA0C,OAC7I,uBAAGW,UAAU,aACX,kBAAC,IAAD,CAAMA,UAAU,iBAAiBM,GAAIC,YAAWd,IAAEK,IAAIK,EAAM,MAAO,QAASV,IAAEK,IAAI,EAAKT,MAAO,yCAA0C,MAAxI,IAA+I,0BAAMW,UAAU,mBAAmBc,cAAY,kBAS5M,kBAAC,IAAD,iBAAY1B,KAAKC,MAAjB,CAAwBM,KAAMP,KAAKC,MAAMC,YAAYK,KAAMC,KAAMR,KAAKC,MAAMC,YAAaO,MAAOJ,IAAEK,IAAIV,KAAKC,MAAO,sDAAuD,Y,GAzCvJ0B,IAAMC","file":"component---src-templates-home-js-4da78e7868378456e9da.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment-strftime';\nimport {graphql} from 'gatsby';\n\nimport {Layout} from '../components/index';\nimport Header from '../components/Header';\nimport {getPages, Link, withPrefix} from '../utils';\nimport Footer from '../components/Footer';\n\n// this minimal GraphQL query ensures that when 'gatsby develop' is running,\n// any changes to content files are reflected in browser\nexport const query = graphql`\n  query($url: String) {\n    sitePage(path: {eq: $url}) {\n      id\n    }\n  }\n`;\n\nexport default class Home extends React.Component {\n    render() {\n        let posts = getPages(this.props.pageContext.pages, '/posts');\n        let posts_count = _.size(posts);\n        return (\n            <Layout {...this.props}>\n              <Header {...this.props} site={this.props.pageContext.site} page={this.props.pageContext} image={_.get(this.props, 'pageContext.site.siteMetadata.header.background_img', null)} />\n              <div id=\"content\" className=\"site-content\">\n                <main id=\"main\" className=\"site-main inner\">\n                  <div className=\"post-feed\">\n                    {(posts_count > 0) && ((() => {\n                        let posts_sorted = _.orderBy(posts, 'frontmatter.date', 'desc');\n                        return (\n                          _.map(posts_sorted, (post, post_idx) => (\n                          <article key={post_idx} className=\"post\">\n                            <header className=\"post-header\">\n                              <h2 className=\"post-title\"><Link to={withPrefix(_.get(post, 'url', null))} rel=\"bookmark\">{_.get(post, 'frontmatter.title', null)}</Link></h2>\n                              <div className=\"post-meta\">\n                                Published on <time className=\"published\"\n                                  dateTime={moment(_.get(post, 'frontmatter.date', null)).strftime('%Y-%m-%d %H:%M')}>{moment(_.get(post, 'frontmatter.date', null)).strftime('%B %d, %Y')}</time>\n                              </div>\n                            </header>\n                            {_.get(post, 'frontmatter.thumb_img_path', null) && (\n                            <Link className=\"post-thumbnail\" to={withPrefix(_.get(post, 'url', null))}>\n                              <img className=\"thumbnail\" src={withPrefix(_.get(post, 'frontmatter.thumb_img_path', null))} alt={_.get(post, 'frontmatter.thumb_img_alt', null)} />\n                            </Link>\n                            )}\n                            <div className=\"post-content\">\n                              <p>{_.get(post, 'frontmatter.excerpt', null)}</p>\n                            </div>\n                            {((_.get(this.props, 'pageContext.frontmatter.has_more_link', null) === true) && _.get(this.props, 'pageContext.frontmatter.more_link_text', null)) && (\n                            <p className=\"read-more\">\n                              <Link className=\"read-more-link\" to={withPrefix(_.get(post, 'url', null))}>{_.get(this.props, 'pageContext.frontmatter.more_link_text', null)} <span className=\"icon-arrow-right\" aria-hidden=\"true\" /></Link>\n                            </p>\n                            )}\n                          </article>\n                          ))\n                        );\n                    })())}\n                  </div>\n                </main>\n                <Footer {...this.props} site={this.props.pageContext.site} page={this.props.pageContext} image={_.get(this.props, 'pageContext.site.siteMetadata.header.background_img', null)} />\n              </div>\n            </Layout>\n        );\n    }\n}\n"],"sourceRoot":""}