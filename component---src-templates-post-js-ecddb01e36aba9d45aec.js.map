{"version":3,"sources":["webpack:///./src/templates/post.js"],"names":["query","Post","render","this","props","_","get","site","pageContext","page","image","id","className","dateTime","moment","strftime","htmlToReact","React","Component"],"mappings":"2TAaO,IAAMA,EAAK,aAQGC,E,gLACjBC,OAAA,WACI,OACI,kBAAC,IAAWC,KAAKC,OACsD,IAAnEC,IAAEC,IAAIH,KAAKC,MAAO,sCAAuC,MACzD,kBAAC,IAAcD,KAAKC,OAEpB,kBAAC,IAAD,iBAAYD,KAAKC,MAAjB,CAAwBG,KAAMJ,KAAKC,MAAMI,YAAYD,KAAME,KAAMN,KAAKC,MAAMI,YAAaE,MAAOL,IAAEC,IAAIH,KAAKC,MAAO,2CAA4C,SAEhK,yBAAKO,GAAG,UAAUC,UAAU,gBAC1B,0BAAMD,GAAG,OAAOC,UAAU,mBACxB,6BAASA,UAAU,kBACjB,4BAAQA,UAAU,eAChB,wBAAIA,UAAU,cAAcP,IAAEC,IAAIH,KAAKC,MAAO,gCAAiC,OAC/E,yBAAKQ,UAAU,aAAf,gBACe,0BAAMA,UAAU,YAC3BC,SAAUC,IAAOT,IAAEC,IAAIH,KAAKC,MAAO,+BAAgC,OAAOW,SAAS,mBAAoBD,IAAOT,IAAEC,IAAIH,KAAKC,MAAO,+BAAgC,OAAOW,SAAS,gBAGrLV,IAAEC,IAAIH,KAAKC,MAAO,mCAAoC,OACvD,yBAAKQ,UAAU,iBACZI,YAAYX,IAAEC,IAAIH,KAAKC,MAAO,mCAAoC,QAGrE,yBAAKQ,UAAU,gBACZI,YAAYX,IAAEC,IAAIH,KAAKC,MAAO,mBAAoB,UAIzD,kBAAC,IAAWD,KAAKC,U,GA7BCa,IAAMC","file":"component---src-templates-post-js-ecddb01e36aba9d45aec.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment-strftime';\nimport {graphql} from 'gatsby';\n\nimport {Layout} from '../components/index';\nimport HeaderAlt from '../components/HeaderAlt';\nimport Header from '../components/Header';\nimport {htmlToReact} from '../utils';\nimport Footer from '../components/Footer';\n\n// this minimal GraphQL query ensures that when 'gatsby develop' is running,\n// any changes to content files are reflected in browser\nexport const query = graphql`\n  query($url: String) {\n    sitePage(path: {eq: $url}) {\n      id\n    }\n  }\n`;\n\nexport default class Post extends React.Component {\n    render() {\n        return (\n            <Layout {...this.props}>\n              {(_.get(this.props, 'pageContext.frontmatter.hide_header', null) === true) ? (\n                <HeaderAlt {...this.props} />\n              ) : \n                <Header {...this.props} site={this.props.pageContext.site} page={this.props.pageContext} image={_.get(this.props, 'pageContext.frontmatter.content_img_path', null)} />\n              }\n              <div id=\"content\" className=\"site-content\">\n                <main id=\"main\" className=\"site-main inner\">\n                  <article className=\"post post-full\">\n                    <header className=\"post-header\">\n                      <h1 className=\"post-title\">{_.get(this.props, 'pageContext.frontmatter.title', null)}</h1>\n                      <div className=\"post-meta\">\n                        Published on <time className=\"published\"\n                          dateTime={moment(_.get(this.props, 'pageContext.frontmatter.date', null)).strftime('%Y-%m-%d %H:%M')}>{moment(_.get(this.props, 'pageContext.frontmatter.date', null)).strftime('%B %d, %Y')}</time>\n                      </div>\n                    </header>\n                    {_.get(this.props, 'pageContext.frontmatter.subtitle', null) && (\n                    <div className=\"post-subtitle\">\n                      {htmlToReact(_.get(this.props, 'pageContext.frontmatter.subtitle', null))}\n                    </div>\n                    )}\n                    <div className=\"post-content\">\n                      {htmlToReact(_.get(this.props, 'pageContext.html', null))}\n                    </div>\n                  </article>\n                </main>\n                <Footer {...this.props} />\n              </div>\n            </Layout>\n        );\n    }\n}\n"],"sourceRoot":""}